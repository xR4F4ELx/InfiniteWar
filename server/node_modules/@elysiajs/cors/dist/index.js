import { Elysia } from 'elysia';
export const cors = (config = {
    origin: true,
    methods: true,
    allowedHeaders: '*',
    exposedHeaders: '*',
    credentials: true,
    maxAge: 5,
    preflight: true
}) => {
    const { origin = true, methods = true, allowedHeaders = '*', exposedHeaders = '*', credentials = true, maxAge = 5, preflight = true } = config;
    const app = new Elysia({
        name: '@elysiajs/cors',
        seed: config
    });
    const origins = typeof origin === 'boolean'
        ? undefined
        : Array.isArray(origin)
            ? origin
            : [origin];
    const processOrigin = (origin, request, from) => {
        switch (typeof origin) {
            case 'string':
                const protocolStart = from.indexOf('://');
                if (protocolStart !== -1)
                    from = from.slice(protocolStart + 3);
                const trailingSlash = from.indexOf('/', 0);
                if (trailingSlash !== -1)
                    from = from.slice(trailingSlash);
                return origin === from;
            case 'function':
                return origin(request);
            case 'object':
                return origin.test(from);
        }
    };
    const handleOrigin = (set, request) => {
        if (origin === true) {
            set.headers['Vary'] = '*';
            set.headers['Access-Control-Allow-Origin'] =
                request.headers.get('Origin') || '*';
            return;
        }
        if (!origins?.length)
            return;
        const headers = [];
        if (origins.length) {
            const from = request.headers.get('Origin') ?? '';
            for (let i = 0; i < origins.length; i++) {
                const value = processOrigin(origins[i], request, from);
                if (value === true) {
                    set.headers['Vary'] = origin ? 'Origin' : '*';
                    set.headers['Access-Control-Allow-Origin'] =
                        request.headers.get('Origin') || '*';
                    return;
                }
                if (value)
                    headers.push(value);
            }
        }
        set.headers['Vary'] = 'Origin';
        set.headers['Access-Control-Allow-Origin'] = headers.join(', ');
    };
    const handleMethod = (set, method) => {
        if (methods === true)
            return (set.headers['Access-Control-Allow-Methods'] = method ?? '*');
        if (methods === false || !methods?.length)
            return;
        if (methods === '*')
            return (set.headers['Access-Control-Allow-Methods'] = '*');
        if (!Array.isArray(methods))
            return (set.headers['Access-Control-Allow-Methods'] = methods);
        set.headers['Access-Control-Allow-Methods'] = methods.join(', ');
    };
    if (preflight)
        app.options('/', ({ set, request }) => {
            handleOrigin(set, request);
            handleMethod(set, request.method);
            if (exposedHeaders.length)
                set.headers['Access-Control-Allow-Headers'] =
                    typeof allowedHeaders === 'string'
                        ? allowedHeaders
                        : allowedHeaders.join(', ');
            if (maxAge)
                set.headers['Access-Control-Max-Age'] = maxAge.toString();
            return new Response('', {
                status: 204
            });
        }).options('/*', ({ set, request }) => {
            handleOrigin(set, request);
            handleMethod(set, request.method);
            if (exposedHeaders.length)
                set.headers['Access-Control-Allow-Headers'] =
                    typeof allowedHeaders === 'string'
                        ? allowedHeaders
                        : allowedHeaders.join(', ');
            if (maxAge)
                set.headers['Access-Control-Max-Age'] = maxAge.toString();
            return new Response('', {
                status: 204
            });
        });
    const defaultHeaders = {
        'Access-Control-Allow-Headers': typeof allowedHeaders === 'string'
            ? allowedHeaders
            : allowedHeaders.join(', '),
        'Access-Control-Exposed-Headers': typeof exposedHeaders === 'string'
            ? exposedHeaders
            : exposedHeaders.join(', ')
    };
    if (credentials === true)
        defaultHeaders['Access-Control-Allow-Credentials'] = 'true';
    return app.headers(defaultHeaders).onRequest(({ set, request }) => {
        handleOrigin(set, request);
        handleMethod(set, request.method);
    });
};
export default cors;
